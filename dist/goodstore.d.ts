import { IDataRowDto } from "../src/lib/dto/IDataRowDto";
import { IPageInfoDto } from "../src/lib/dto/IPageInfoDto";
import { IRange1 } from "../src/lib/dto/IRange1";
interface IDataStoreResponseDto {
	totalCells: IVec2; // available cells
	totalPx?: IVec2; // pixel size
	dataPort: IRange2; // cells returned
	pxScope?: IRect; // pixel start and stop of returned data
	r: IDataRowDto[]; // row and cell objects with data
	cellsPerPage?: IVec2; 
}// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../goodcore
//   ../../rxjs/BehaviorSubject
//   ../../rxjs/Subscription
//   ../../rxjs/Observable

declare module 'goodstore' {
    export { DataStore as DataStore } from "goodstore/DataStore";
    export { DataStoreConsumable as DataStoreConsumable } from "goodstore/DataStoreConsumable";
    export { DataStoreRequestDto as DataStoreRequestDto } from "goodstore/Dto/DataStoreRequestDto";
    export { RequestConfig as RequestConfig } from "goodstore/RequestConfig";
}

declare module 'goodstore/DataStore' {
    import { CallerHandle } from "goodstore/CallerHandle";
    import { CallerInternal } from "goodstore/CallerInternal";
    import { IDataStoreConfig } from "goodstore/IDataStoreConfig";
    import { RequestConfig } from "goodstore/RequestConfig";
    export class DataStore {
        static DEFAULT_CONFIG: IDataStoreConfig;
        isDebug: boolean;
        constructor(config: IDataStoreConfig);
        load(caller: CallerInternal, force?: boolean): void;
        register(config: RequestConfig): CallerHandle;
    }
}

declare module 'goodstore/DataStoreConsumable' {
    import { Range2, Rect, Vec2 } from "goodcore";
    import { DataRow } from "goodstore/DataRow";
    export class DataStoreConsumable implements IInitable<DataStoreConsumable> {
        init(obj: any, mapping?: any): this;
        totalCells: Vec2;
        totalPx: Vec2;
        loadPort: Range2;
        pxScope: Rect;
        rows: DataRow[];
    }
}

declare module 'goodstore/Dto/DataStoreRequestDto' {
    import { Range2 } from "goodcore";
    export class DataStoreRequestDto implements IInitable<DataStoreRequestDto> {
        init(obj: any, mapping?: any): this;
        sourceId: string;
        requestId: number;
        cellRequest: Range2;
    }
}

declare module 'goodstore/RequestConfig' {
    import { Range2, Vec2 } from "goodcore";
    import { IRequestConfig } from "goodstore/IRequestConfig";
    export class RequestConfig implements IRequestConfig, IInitable<RequestConfig> {
        init(obj: any, mapping?: any): this;
        _viewPort: Range2;
        _requestMargin: Vec2;
        _pxRequestMargin: Vec2;
        viewPort: Range2;
        requestMargin: Vec2;
        pxViewPort: Range2;
        pxRequestMargin: Vec2;
        loadPort: IRange2;
        pxLoadPort: IRange2;
    }
}

declare module 'goodstore/CallerHandle' {
    import { Range2, Vec2 } from "goodcore";
    import { BehaviorSubject } from "rxjs/BehaviorSubject";
    import { CallerInternal } from "goodstore/CallerInternal";
    import { DataStore } from "goodstore/DataStore";
    import { DataStoreConsumable } from "goodstore/DataStoreConsumable";
    import { IRequestConfig } from "goodstore/IRequestConfig";
    import { RequestConfig } from "goodstore/RequestConfig";
    export class CallerHandle {
        readonly internal: CallerInternal;
        readonly stream: BehaviorSubject<DataStoreConsumable>;
        viewPort: Range2;
        pxViewPort: Range2;
        requestMargin: Vec2;
        constructor(id: number, store: DataStore, config: RequestConfig);
        load(config?: IRequestConfig): void;
        unregister(): void;
    }
}

declare module 'goodstore/CallerInternal' {
    import { Range2, Vec2 } from "goodcore";
    import { BehaviorSubject } from "rxjs/BehaviorSubject";
    import { Subscription } from "rxjs/Subscription";
    import { DataStoreConsumable } from "goodstore/DataStoreConsumable";
    import { RequestConfig } from "goodstore/RequestConfig";
    export class CallerInternal {
        ignoreFetch: number;
        fetchSubscription: Subscription;
        requestId: number;
        totalCells: Vec2;
        totalPx: Vec2;
        config: RequestConfig;
        readonly stream: BehaviorSubject<DataStoreConsumable>;
        loadPort: IRange2;
        pxLoadPort: IRange2;
        readonly fixedLoadPort: Range2;
        readonly fixedPxLoadPort: Range2;
        viewPort: Range2;
        pxViewPort: Range2;
        constructor(config: RequestConfig, stream: BehaviorSubject<DataStoreConsumable>);
        fixLoadPort(): void;
        ignoreOngoingFetch(): void;
        cancelOngoingFetch(): void;
        limitLoadPortByTotalCells(): void;
        limitPxLoadPortByTotalPx(): void;
    }
}

declare module 'goodstore/IDataStoreConfig' {
    import { Vec2 } from "goodcore";
    import { Observable } from "rxjs/Observable";
    import { IRange1 } from "goodstore/Dto/IRange1";
    export interface IDataStoreConfig {
        pageSize?: Vec2;
        retainSize: number;
        endPointFn: (payload: any) => Observable<any>;
        pagePxRanges?: {
            x: IRange1[];
            y: IRange1[];
        };
    }
}

declare module 'goodstore/DataRow' {
    import { IDataCellDto } from "goodstore/Dto/IDataCellDto";
    import { IDataRowDto } from "goodstore/Dto/IDataRowDto";
    export class DataRow implements IDataRowDto, IInitable<DataRow>, IPoolable {
        __pool__: IPool<IPoolable>;
        release(): void;
        initPool(pool: IPool<IPoolable>): void;
        init(obj: any, mapping?: any): this;
        i: number;
        h: number;
        c: IDataCellDto[];
        d: any;
        constructor(length?: number);
    }
}

declare module 'goodstore/IRequestConfig' {
    import { Range2, Vec2 } from "goodcore";
    export interface IRequestConfig {
        viewPort?: Range2;
        pxViewPort?: Range2;
        requestMargin?: Vec2;
        forceStream?: boolean;
        pxRequestMargin?: Vec2;
    }
}

declare module 'goodstore/Dto/IRange1' {
    export interface IRange1 {
        p: number;
        s: number;
    }
}

declare module 'goodstore/Dto/IDataCellDto' {
    export interface IDataCellDto {
        i: IVec2;
        w: number;
        d: any;
    }
}

declare module 'goodstore/Dto/IDataRowDto' {
    import { IDataCellDto } from "goodstore/Dto/IDataCellDto";
    export interface IDataRowDto {
        i: number;
        h: number;
        c: IDataCellDto[];
        d: any;
    }
}

